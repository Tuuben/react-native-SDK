{"version":3,"sources":["ConsentViewEvents.ts"],"names":["IronSourceMediation","NativeModules","CONSENT_VIEW_DID_LOAD_SUCCESS","CONSENT_VIEW_DID_FAIL_TO_LOAD","CONSENT_VIEW_DID_SHOW_SUCCESS","CONSENT_VIEW_DID_FAIL_TO_SHOW","CONSENT_VIEW_DID_ACCEPT","getConstants","eventEmitter","NativeEventEmitter","NotIOS","Platform","OS","NonIOSStub","setListener","_","console","error","removeListener","consentViewDidLoadSuccess","listener","removeAllListeners","addListener","consentViewInfoObj","consentViewType","consentViewInfoCodec","consentViewDidFailToLoad","errorObj","consentViewErrorCodec","consentViewDidShowSuccess","consentViewDidFailToShow","consentViewDidAccept","ConsentViewEvents"],"mappings":"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","sourcesContent":["import { NativeEventEmitter, NativeModules, Platform } from 'react-native'\nimport { ConsentViewError, consentViewErrorCodec } from '../models'\nimport { consentViewInfoCodec } from '../models/ConsentViewInfo'\nimport { decode } from '../models/utils'\n\n// The Main Module\nconst { IronSourceMediation } = NativeModules\n// Event Name Constants defined on iOS platform\n// These would be undefined on Android.\nconst {\n  CONSENT_VIEW_DID_LOAD_SUCCESS,\n  CONSENT_VIEW_DID_FAIL_TO_LOAD,\n  CONSENT_VIEW_DID_SHOW_SUCCESS,\n  CONSENT_VIEW_DID_FAIL_TO_SHOW,\n  CONSENT_VIEW_DID_ACCEPT,\n} = IronSourceMediation.getConstants()\n\n// Create an EventEmitter to subscribe to ConsentView delegate callbacks\nconst eventEmitter = new NativeEventEmitter(IronSourceMediation)\n\n// Stub out for Android\nconst NotIOS = Platform.OS !== 'ios'\nconst NonIOSStub = {\n  setListener: (_: any) => console.error('Only supported for iOS.'),\n  removeListener: () => console.error('Only supported for iOS.'),\n}\n\n/**\n * iOS 14 ConsentView events API\n * Only fired on iOS\n */\n\n/**\n * Android: n/a\n *     iOS: consentViewDidLoadSuccess\n */\nconst consentViewDidLoadSuccess = NotIOS\n  ? NonIOSStub\n  : {\n      setListener: (listener: (consentViewType: string) => void) => {\n        eventEmitter.removeAllListeners(CONSENT_VIEW_DID_LOAD_SUCCESS)\n        eventEmitter.addListener(\n          CONSENT_VIEW_DID_LOAD_SUCCESS,\n          (consentViewInfoObj: unknown) => {\n            const { consentViewType } = decode(\n              consentViewInfoCodec,\n              consentViewInfoObj\n            )\n            listener(consentViewType)\n          }\n        )\n      },\n      removeListener: () =>\n        eventEmitter.removeAllListeners(CONSENT_VIEW_DID_LOAD_SUCCESS),\n    }\n\n/**\n * Android: n/a\n *     iOS: consentViewDidFailToLoadWithError\n */\nconst consentViewDidFailToLoad = NotIOS\n  ? NonIOSStub\n  : {\n      setListener: (listener: (error: ConsentViewError) => void) => {\n        eventEmitter.removeAllListeners(CONSENT_VIEW_DID_FAIL_TO_LOAD)\n        eventEmitter.addListener(\n          CONSENT_VIEW_DID_FAIL_TO_LOAD,\n          (errorObj: unknown) =>\n            listener(decode(consentViewErrorCodec, errorObj))\n        )\n      },\n      removeListener: () =>\n        eventEmitter.removeAllListeners(CONSENT_VIEW_DID_FAIL_TO_LOAD),\n    }\n\n/**\n * Android: n/a\n *     iOS: consentViewDidShowSuccess\n */\nconst consentViewDidShowSuccess = NotIOS\n  ? NonIOSStub\n  : {\n      setListener: (listener: (consentViewType: string) => void) => {\n        eventEmitter.removeAllListeners(CONSENT_VIEW_DID_SHOW_SUCCESS)\n        eventEmitter.addListener(\n          CONSENT_VIEW_DID_SHOW_SUCCESS,\n          (consentViewInfoObj: unknown) => {\n            const { consentViewType } = decode(\n              consentViewInfoCodec,\n              consentViewInfoObj\n            )\n            listener(consentViewType)\n          }\n        )\n      },\n      removeListener: () =>\n        eventEmitter.removeAllListeners(CONSENT_VIEW_DID_SHOW_SUCCESS),\n    }\n\n/**\n * Android: n/a\n *     iOS: consentViewDidFailToShowWithError\n */\nconst consentViewDidFailToShow = NotIOS\n  ? NonIOSStub\n  : {\n      setListener: (listener: (error: ConsentViewError) => void) => {\n        eventEmitter.removeAllListeners(CONSENT_VIEW_DID_FAIL_TO_SHOW)\n        eventEmitter.addListener(\n          CONSENT_VIEW_DID_FAIL_TO_SHOW,\n          (errorObj: unknown) =>\n            listener(decode(consentViewErrorCodec, errorObj))\n        )\n      },\n      removeListener: () =>\n        eventEmitter.removeAllListeners(CONSENT_VIEW_DID_FAIL_TO_SHOW),\n    }\n\n/**\n * Android: n/a\n *     iOS: consentViewDidAccept\n */\nconst consentViewDidAccept = NotIOS\n  ? NonIOSStub\n  : {\n      setListener: (listener: (consentViewType: string) => void) => {\n        eventEmitter.removeAllListeners(CONSENT_VIEW_DID_ACCEPT)\n        eventEmitter.addListener(\n          CONSENT_VIEW_DID_ACCEPT,\n          ({ consentViewType }: { consentViewType: string }) =>\n            listener(consentViewType)\n        )\n      },\n      removeListener: () =>\n        eventEmitter.removeAllListeners(CONSENT_VIEW_DID_ACCEPT),\n    }\n\nconst removeAllListeners = () => {\n  consentViewDidLoadSuccess.removeListener()\n  consentViewDidFailToLoad.removeListener()\n  consentViewDidShowSuccess.removeListener()\n  consentViewDidFailToShow.removeListener()\n  consentViewDidAccept.removeListener()\n}\n\nexport const ConsentViewEvents = {\n  consentViewDidLoadSuccess,\n  consentViewDidFailToLoad,\n  consentViewDidShowSuccess,\n  consentViewDidFailToShow,\n  consentViewDidAccept,\n  removeAllListeners,\n}\n"]}