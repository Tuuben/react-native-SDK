{"version":3,"sources":["IronSource.ts"],"names":["getReactNativeVersion","version","require","e","console","warn","getPluginVersion","PLUGIN_VERSION","getNativeSDKVersion","Platform","OS","ANDROID_SDK_VERSION","IOS_SDK_VERSION","IronSourceMediation","NativeModules","IronSourceNativeModule","init","appKey","adUnits","reactNativeVersion","log","PLUGIN_TYPE","undefined","length","initWithAdUnits","showRewardedVideo","placementName","showRewardedVideoForPlacement","showInterstitial","showInterstitialForPlacement","showOfferwall","showOfferwallForPlacement","IOSMethodStubs","getConversionValue","Promise","resolve","loadConsentViewWithType","_","showConsentViewWithType","mergedModule","IronSource","Object","freeze"],"mappings":"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","sourcesContent":["/**\n * This is the main IronSource bridge module.\n */\n\nimport { NativeModules, Platform } from 'react-native'\nimport { setPluginData } from './config/IronSourceConfig'\nimport {\n  ANDROID_SDK_VERSION,\n  IOS_SDK_VERSION,\n  PLUGIN_TYPE,\n  PLUGIN_VERSION,\n} from './IronSourceConstants'\nimport type {\n  AdUnit,\n  IronSourceBannerOptions,\n  IronSourceRVPlacement,\n  IronSourceSegment,\n} from './models'\n\n/** Types =======================================================================**/\n\n/**\n * Native Module Type\n * Descriptions show the function names of native SDKs.\n */\ntype IronSourceNativeModuleType = {\n  /** Base API =============================================================**/\n\n  /**\n   * Android: getAdvertiserId\n   *     iOS: advertiserId\n   */\n  getAdvertiserId(): Promise<string | null>\n\n  /**\n   * Android: validateIntegration\n   *     iOS: validateIntegration\n   */\n  validateIntegration(): Promise<void>\n\n  /**\n   * Android: shouldTrackNetworkState\n   *     iOS: shouldTrackReachability\n   */\n  shouldTrackNetworkState(isEnabled: boolean): Promise<void>\n\n  /**\n   * Android: setDynamicUserId\n   *     iOS: setDynamicUserId\n   *\n   * For RV server-to-server callback.\n   * Must be set before showRV.\n   */\n  setDynamicUserId(userId: string): Promise<void>\n\n  /**\n   * Android: setAdaptersDebug\n   *     iOS: setAdaptersDebug\n   */\n  setAdaptersDebug(isEnabled: boolean): Promise<void>\n\n  /**\n   * Android: setConsent\n   *     iOS: setConsent\n   */\n  setConsent(isConsent: boolean): Promise<void>\n\n  /**\n   * Android: setMetaData\n   *     iOS: setMetaDataWithKey\n   */\n  setMetaData(key: string, values: Array<string>): Promise<void>\n\n  /**\n   * Android: setSegment\n   *     iOS: setSegment\n   */\n  setSegment(segment: IronSourceSegment): Promise<void>\n\n  /** init API =============================================================**/\n\n  /**\n   * Android: setUserId\n   *     iOS: setUserId\n   *\n   * When an empty string was passed as userId, SDK falls back to default.\n   */\n  setUserId(userId: string): Promise<void>\n\n  /**\n   * Android: init\n   *     iOS: initWithAppKey\n   *\n   * Use init to init with all ad units.\n   * Use initWithAdUnits to init with only specific ad units.\n   */\n  init(appKey: string): Promise<void>\n  initWithAdUnits(appKey: string, adUnits: Array<AdUnit>): Promise<void>\n\n  /** RV API ===============================================================**/\n\n  /**\n   * Android: showRewardedVideo\n   *     iOS: showRewardedVideoWithViewController\n   */\n  showRewardedVideo(): Promise<void>\n  showRewardedVideoForPlacement(placementName: string): Promise<void>\n\n  /**\n   * Android: isRewardedVideoAvailable\n   *     iOS: hasRewardedVideo\n   */\n  isRewardedVideoAvailable(): Promise<boolean>\n\n  /**\n   * Android: getRewardedVideoPlacementInfo\n   *     iOS: rewardedVideoPlacementInfo\n   *\n   * Must be called after init success, otherwise returns null.\n   * This defaults back to DefaultPlacement if none matched.\n   */\n  getRewardedVideoPlacementInfo(\n    placementName: string\n  ): Promise<IronSourceRVPlacement | undefined>\n\n  /**\n   * Android: isRewardedVideoPlacementCapped\n   *     iOS: isRewardedVideoCappedForPlacement\n   *\n   * If none matches with the name, returns false.\n   */\n  isRewardedVideoPlacementCapped(placementName: string): Promise<boolean>\n\n  /**\n   * Android: setRewardedVideoServerParameters\n   *     iOS: setRewardedVideoServerParameters\n   *\n   * Must be called before showRewardedVideo\n   */\n  setRewardedVideoServerParams(params: { [key: string]: string }): Promise<void>\n\n  /**\n   * Android: clearRewardedVideoServerParameters\n   *     iOS: clearRewardedVideoServerParameters\n   */\n  clearRewardedVideoServerParams(): Promise<void>\n\n  /**\n   * Must be called before init.\n   * Android: setManualLoadRewardedVideo\n   *     iOS: setRewardedVideoManualDelegate\n   */\n  setManualLoadRewardedVideo(): Promise<void>\n\n  /**\n   * For Manual Load RV mode\n   * Android: loadRewardedVideo\n   *     iOS: loadRewardedVideo\n   */\n  loadRewardedVideo(): Promise<void>\n\n  /** IS API ===============================================================**/\n\n  /**\n   * Android: loadInterstitial\n   *     iOS: loadInterstitial\n   */\n  loadInterstitial(): Promise<void>\n\n  /**\n   * Android: showInterstitial\n   *     iOS: showInterstitialWithViewController\n   */\n  showInterstitial(): Promise<void>\n  showInterstitialForPlacement(placementName: string): Promise<void>\n\n  /**\n   * Android: isInterstitialReady\n   *     iOS: hasInterstitial\n   */\n  isInterstitialReady(): Promise<boolean>\n\n  /**\n   * Android: isInterstitialPlacementCapped\n   *     iOS: isInterstitialCappedForPlacement\n   */\n  isInterstitialPlacementCapped(placementName: string): Promise<boolean>\n\n  /** BN API ===============================================================**/\n\n  /**\n   * Android: loadBanner\n   *     iOS: loadBannerWithViewController\n   *\n   * It falls back to BANNER in the case of invalid sizeDescriptions.\n   */\n  loadBanner(options: IronSourceBannerOptions): Promise<void>\n\n  /**\n   * Android: destroyBanner\n   *     iOS: destroyBanner\n   */\n  destroyBanner(): Promise<void>\n\n  /**\n   * Android: n/a\n   *     iOS: n/a\n   *\n   * This simply changes the visibility of the hidden banner view.\n   */\n  displayBanner(): Promise<void>\n\n  /**\n   * Android: n/a\n   *     iOS: n/a\n   * This simply changes the visibility of the banner view.\n   * Reloading does not take place while it's hidden.\n   */\n  hideBanner(): Promise<void>\n\n  /**\n   * Android: isBannerPlacementCapped\n   *     iOS: isBannerCappedForPlacement\n   */\n  isBannerPlacementCapped(placementName: string): Promise<boolean>\n\n  /** OW API ===============================================================**/\n\n  /**\n   * Android: showOfferwall\n   *     iOS: showOfferwallWithViewController\n   */\n  showOfferwall(): Promise<void>\n  showOfferwallForPlacement(placementName: string): Promise<void>\n\n  /**\n   * Android: getOfferwallCredits\n   *     iOS: offerwallCredits\n   *\n   * Credit info will be notified through the OW Events listener.\n   */\n  getOfferwallCredits(): Promise<void>\n\n  /**\n   * Android: isOfferwallAvailable\n   *     iOS: hasOfferwall\n   */\n  isOfferwallAvailable(): Promise<boolean>\n\n  /**\n   * Android: setClientSideCallbacks\n   *     iOS: setUseClientSideCallbacks\n   *\n   * This must be called before init.\n   * OW client side automatic result polling\n   * https://developers.is.com/ironsource-mobile/android/offerwall-integration-android/#step-3\n   */\n  setClientSideCallbacks(isEnabled: boolean): Promise<void>\n\n  /**\n   * Android: setOfferwallCustomParams\n   *     iOS: setOfferwallCustomParameters\n   *\n   * This must be called before showOfferwall.\n   */\n  setOfferwallCustomParams(params: { [key: string]: string }): Promise<void>\n\n  /** iOS ConversionValue API ========================================================**/\n\n  /**\n   * Android: n/a\n   *     iOS: getConversionValue\n   *\n   * Returns undefined for Android\n   */\n  getConversionValue(): Promise<number | undefined>\n\n  /** iOS ConsentView API ============================================================**/\n  /**\n   * Android: n/a\n   *     iOS: loadConsentViewWithType\n   *\n   * use \"pre\" for all your consentViewType\n   * https://developers.is.com/ironsource-mobile/ios/permission-popup-ios/#step-1\n   */\n  loadConsentViewWithType(consentViewType: string): Promise<void>\n\n  /**\n   * Android: n/a\n   *     iOS: showConsentViewWithType\n   *\n   * use \"pre\" for all your consentViewType\n   * https://developers.is.com/ironsource-mobile/ios/permission-popup-ios/#step-1\n   */\n  showConsentViewWithType(consentViewType: string): Promise<void>\n}\n\n/**\n * These are needed since ReactNative NativeModules does not support function overload or optional arguments.\n */\ntype InitFunction = (appKey: string, adUnits?: Array<AdUnit>) => Promise<void>\ntype ShowFunction = (placementName?: string) => Promise<void>\ntype IronSourceProxyType = {\n  /**\n   * Android: init\n   *     iOS: initWithAppKey\n   */\n  init: InitFunction\n  /**\n   * Android: showRewardedVideo\n   *     iOS: showRewardedVideoWithViewController\n   */\n  showRewardedVideo: ShowFunction\n  /**\n   * Android: showInterstitial\n   *     iOS: showInterstitialWithViewController\n   */\n  showInterstitial: ShowFunction\n  /**\n   * Android: showOfferwall\n   *     iOS: showOfferwallWithViewController\n   */\n  showOfferwall: ShowFunction\n}\n\ntype UtilFunctions = {\n  getPluginVersion: () => string\n  getNativeSDKVersion: () => string\n}\n\n/**\n * Exposed Module Type\n */\ntype IronSourceType = UtilFunctions &\n  IronSourceProxyType &\n  Omit<\n    IronSourceNativeModuleType,\n    | 'init'\n    | 'initWithAdUnits'\n    | 'showRewardedVideo'\n    | 'showRewardedVideoForPlacement'\n    | 'showInterstitial'\n    | 'showInterstitialForPlacement'\n    | 'showOfferwall'\n    | 'showOfferwallForPlacement'\n  >\n\n/** Util  =========================================================================**/\nconst getReactNativeVersion = (): string => {\n  let version = ''\n  try {\n    version = require('react-native/package.json').version as string\n  } catch (e) {\n    console.warn('IronSource - failed to get the ReactNative version')\n  } finally {\n    return version\n  }\n}\n\nconst getPluginVersion: () => string = () => {\n  return PLUGIN_VERSION\n}\n\nconst getNativeSDKVersion: () => string = () => {\n  return Platform.OS === 'android'\n    ? ANDROID_SDK_VERSION\n    : Platform.OS === 'ios'\n    ? IOS_SDK_VERSION\n    : 'unsupported'\n}\n\n/** Module  =======================================================================**/\nconst { IronSourceMediation } = NativeModules\nconst IronSourceNativeModule: IronSourceNativeModuleType = IronSourceMediation\n\n/**\n * Proxy Functions\n */\n\nconst init: InitFunction = async (\n  appKey: string,\n  adUnits?: Array<AdUnit>\n): Promise<void> => {\n  try {\n    const reactNativeVersion = getReactNativeVersion()\n    console.log('reactNativeVersion', reactNativeVersion) // TODO: delete\n    // set plugin data\n    await setPluginData(PLUGIN_TYPE, PLUGIN_VERSION, reactNativeVersion)\n  } catch (e) {\n    // log?\n    console.warn('failed to set plugin data')\n  }\n\n  // init\n  return adUnits === undefined || adUnits.length === 0\n    ? IronSourceNativeModule.init(appKey)\n    : IronSourceNativeModule.initWithAdUnits(appKey, adUnits)\n}\n\nconst showRewardedVideo: ShowFunction = async (\n  placementName?: string\n): Promise<void> => {\n  return placementName === undefined\n    ? IronSourceNativeModule.showRewardedVideo()\n    : IronSourceNativeModule.showRewardedVideoForPlacement(placementName)\n}\n\nconst showInterstitial: ShowFunction = async (\n  placementName?: string\n): Promise<void> => {\n  return placementName === undefined\n    ? IronSourceNativeModule.showInterstitial()\n    : IronSourceNativeModule.showInterstitialForPlacement(placementName)\n}\n\nconst showOfferwall: ShowFunction = async (\n  placementName?: string\n): Promise<void> => {\n  return placementName === undefined\n    ? IronSourceNativeModule.showOfferwall()\n    : IronSourceNativeModule.showOfferwallForPlacement(placementName)\n}\n\n/**\n * iOS specific function stubs for Android.\n * No rejects for now in the case of these being called on Android.\n */\nconst IOSMethodStubs = {\n  /** iOS ConversionValue API ========================================================**/\n  getConversionValue: () => Promise.resolve(undefined),\n  /** iOS ConsentView API ============================================================**/\n  loadConsentViewWithType: (_: string) => Promise.resolve(),\n  showConsentViewWithType: (_: string) => Promise.resolve(),\n}\n\n/**\n * Exposed Module\n */\nconst mergedModule: IronSourceType = {\n  ...IronSourceMediation,\n  getPluginVersion,\n  getNativeSDKVersion,\n  init,\n  showRewardedVideo,\n  showInterstitial,\n  showOfferwall,\n}\n\nexport const IronSource: Readonly<IronSourceType> = Object.freeze(\n  Platform.OS === 'ios'\n    ? mergedModule\n    : // overwrite stub iOS related methods\n      { ...mergedModule, ...IOSMethodStubs }\n)\n"]}