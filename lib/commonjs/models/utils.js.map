{"version":3,"sources":["utils.ts"],"names":["onLeft","errors","Error","prettyReporter","report","join","decode","codec","value","decoded","optional","t","union","undefined"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA,MAAMA,MAAM,GAAIC,MAAD,IAAsB;AACnC,QAAM,IAAIC,KAAJ,CACH,iBAAgBC,uBAAeC,MAAf,CAAsB,kBAAKH,MAAL,CAAtB,EAAoCI,IAApC,CAAyC,IAAzC,CAA+C,EAD5D,CAAN;AAGD,CAJD;AAMA;AACA;AACA;;;AACO,MAAMC,MAAM,GAAG,CAAIC,KAAJ,EAAkCC,KAAlC,KAAwD;AAC5E,SAAO,oBACLD,KAAK,CAACD,MAAN,CAAaE,KAAb,CADK,EAEL,kBAAKR,MAAL,EAAaS,OAAO,IAAIA,OAAxB,CAFK,CAAP;AAID,CALM;AAOP;AACA;AACA;AACA;;;;;AACO,MAAMC,QAAQ,GAAOH,KAAJ,IACtBI,CAAC,CAACC,KAAF,CAAQ,CAACL,KAAD,EAAQI,CAAC,CAACE,SAAV,CAAR,CADK;AAGP","sourcesContent":["import * as t from 'io-ts'\nimport { pipe } from 'fp-ts/function'\nimport { fold, left } from 'fp-ts/Either'\nimport prettyReporter from 'io-ts-reporters'\n\n// failure handler\nconst onLeft = (errors: t.Errors) => {\n  throw new Error(\n    `DecodeError:\\n${prettyReporter.report(left(errors)).join('\\n')}`\n  )\n}\n\n/**\n * Throws when decode fails\n */\nexport const decode = <T>(codec: t.Decoder<unknown, T>, value: unknown): T => {\n  return pipe(\n    codec.decode(value),\n    fold(onLeft, decoded => decoded)\n  )\n}\n\n/**\n * for an optional field\n * T | undefined\n */\nexport const optional = <T>(codec: t.Type<T, any, any>) =>\n  t.union([codec, t.undefined])\n\n/** Util Types ==================================================================**/\nexport type Without<T> = { [P in keyof T]?: undefined }\nexport type XOR<T, U> = (Without<T> & U) | (Without<U> & T)\n"]}