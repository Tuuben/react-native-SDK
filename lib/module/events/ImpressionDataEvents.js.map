{"version":3,"sources":["ImpressionDataEvents.ts"],"names":["NativeEventEmitter","NativeModules","impressionDataCodec","decode","IronSourceMediation","ON_IMPRESSION_SUCCESS","getConstants","eventEmitter","onImpressionSuccess","setListener","listener","removeAllListeners","addListener","dataObj","undefined","removeListener","ImpressionDataEvents"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,aAA7B,QAAkD,cAAlD;AACA,SAASC,mBAAT,QAAoD,WAApD;AACA,SAASC,MAAT,QAAuB,iBAAvB,C,CAEA;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BH,aAAhC,C,CACA;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAA4BD,mBAAmB,CAACE,YAApB,EAAlC,C,CAEA;;AACA,MAAMC,YAAY,GAAG,IAAIP,kBAAJ,CAAuBI,mBAAvB,CAArB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,MAAMI,mBAAmB,GAAG;AAC1BC,EAAAA,WAAW,EAAGC,QAAD,IAA+C;AAC1DH,IAAAA,YAAY,CAACI,kBAAb,CAAgCN,qBAAhC;AACAE,IAAAA,YAAY,CAACK,WAAb,CAAyBP,qBAAzB,EAAiDQ,OAAD,IAC9CH,QAAQ,CAACG,OAAO,GAAGV,MAAM,CAACD,mBAAD,EAAsBW,OAAtB,CAAT,GAA0CC,SAAlD,CADV;AAGD,GANyB;AAO1BC,EAAAA,cAAc,EAAE,MAAMR,YAAY,CAACI,kBAAb,CAAgCN,qBAAhC;AAPI,CAA5B;;AAUA,MAAMM,kBAAkB,GAAG,MAAM;AAC/BH,EAAAA,mBAAmB,CAACO,cAApB;AACD,CAFD;;AAIA,OAAO,MAAMC,oBAAoB,GAAG;AAClCR,EAAAA,mBADkC;AAElCG,EAAAA;AAFkC,CAA7B","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native'\nimport { impressionDataCodec, ImpressionData } from '../models'\nimport { decode } from '../models/utils'\n\n// The Main Module\nconst { IronSourceMediation } = NativeModules\n// Event Name Constants defined on each platform\nconst { ON_IMPRESSION_SUCCESS } = IronSourceMediation.getConstants()\n\n// Create an EventEmitter to subscribe to ImpressionDataListener callbacks\nconst eventEmitter = new NativeEventEmitter(IronSourceMediation)\n\n/**\n * ARM ImpressionDataListener event API\n * The ARM SDK Postbacks flag must be enabled to receive data\n * https://developers.is.com/ironsource-mobile/general/ad-revenue-measurement-postbacks/#step-1\n */\n\n/**\n * Android: onImpressionSuccess\n *     iOS: impressionDataDidSucceed\n */\nconst onImpressionSuccess = {\n  setListener: (listener: (data?: ImpressionData) => void) => {\n    eventEmitter.removeAllListeners(ON_IMPRESSION_SUCCESS)\n    eventEmitter.addListener(ON_IMPRESSION_SUCCESS, (dataObj?: unknown) =>\n      listener(dataObj ? decode(impressionDataCodec, dataObj) : undefined)\n    )\n  },\n  removeListener: () => eventEmitter.removeAllListeners(ON_IMPRESSION_SUCCESS),\n}\n\nconst removeAllListeners = () => {\n  onImpressionSuccess.removeListener()\n}\n\nexport const ImpressionDataEvents = {\n  onImpressionSuccess,\n  removeAllListeners,\n}\n"]}