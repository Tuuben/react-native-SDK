{"version":3,"sources":["LevelPlayInterstitialEvents.ts"],"names":["NativeEventEmitter","NativeModules","errorAdInfoCodec","ironSourceErrorCodec","ironSourceAdInfoCodec","decode","IronSourceMediation","LP_IS_ON_AD_READY","LP_IS_ON_AD_LOAD_FAILED","LP_IS_ON_AD_OPENED","LP_IS_ON_AD_CLOSED","LP_IS_ON_AD_SHOW_FAILED","LP_IS_ON_AD_CLICKED","LP_IS_ON_AD_SHOW_SUCCEEDED","getConstants","eventEmitter","onAdReady","setListener","listener","removeAllListeners","addListener","adInfoObj","removeListener","onAdLoadFailed","errorObj","onAdOpened","onAdClosed","onAdShowFailed","obj","error","adInfo","onAdClicked","onAdShowSucceeded","LevelPlayInterstitialEvents"],"mappings":"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","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native'\nimport { errorAdInfoCodec } from '../models/nestedCodecs'\nimport {\n  ironSourceErrorCodec,\n  IronSourceError,\n  IronSourceAdInfo,\n  ironSourceAdInfoCodec,\n} from '../models'\nimport { decode } from '../models/utils'\n\n// The Main Module\nconst { IronSourceMediation } = NativeModules\n// Event Name Constants defined on each platform\nconst {\n  LP_IS_ON_AD_READY,\n  LP_IS_ON_AD_LOAD_FAILED,\n  LP_IS_ON_AD_OPENED,\n  LP_IS_ON_AD_CLOSED,\n  LP_IS_ON_AD_SHOW_FAILED,\n  LP_IS_ON_AD_CLICKED,\n  LP_IS_ON_AD_SHOW_SUCCEEDED,\n} = IronSourceMediation.getConstants()\n\n// Create an EventEmitter to subscribe to RewardedVideoListener callbacks\nconst eventEmitter = new NativeEventEmitter(IronSourceMediation)\n\n/**\n * LevelPlay IS Listener Callback Events Handler APIs\n */\n\n/**\n * Android: onAdAvailable\n *     iOS: didLoadWithAdInfo\n */\nconst onAdReady = {\n  setListener: (listener: (adInfo: IronSourceAdInfo) => void) => {\n    eventEmitter.removeAllListeners(LP_IS_ON_AD_READY)\n    eventEmitter.addListener(LP_IS_ON_AD_READY, (adInfoObj: unknown) => {\n      listener(decode(ironSourceAdInfoCodec, adInfoObj))\n    })\n  },\n  removeListener: () => eventEmitter.removeAllListeners(LP_IS_ON_AD_READY),\n}\n\n/**\n * Android: onAdLoadFailed\n *     iOS: didFailToLoadWithError\n */\nconst onAdLoadFailed = {\n  setListener: (listener: (error: IronSourceError) => void) => {\n    eventEmitter.removeAllListeners(LP_IS_ON_AD_LOAD_FAILED)\n    eventEmitter.addListener(LP_IS_ON_AD_LOAD_FAILED, (errorObj: unknown) =>\n      listener(decode(ironSourceErrorCodec, errorObj))\n    )\n  },\n  removeListener: () =>\n    eventEmitter.removeAllListeners(LP_IS_ON_AD_LOAD_FAILED),\n}\n\n/**\n * Android: onAdOpened\n *     iOS: didOpenWithAdInfo\n */\nconst onAdOpened = {\n  setListener: (listener: (adInfo: IronSourceAdInfo) => void) => {\n    eventEmitter.removeAllListeners(LP_IS_ON_AD_OPENED)\n    eventEmitter.addListener(LP_IS_ON_AD_OPENED, (adInfoObj: unknown) => {\n      listener(decode(ironSourceAdInfoCodec, adInfoObj))\n    })\n  },\n  removeListener: () => eventEmitter.removeAllListeners(LP_IS_ON_AD_OPENED),\n}\n\n/**\n * Android: onAdClosed\n *     iOS: didCloseWithAdInfo\n */\nconst onAdClosed = {\n  setListener: (listener: (adInfo: IronSourceAdInfo) => void) => {\n    eventEmitter.removeAllListeners(LP_IS_ON_AD_CLOSED)\n    eventEmitter.addListener(LP_IS_ON_AD_CLOSED, (adInfoObj: unknown) => {\n      listener(decode(ironSourceAdInfoCodec, adInfoObj))\n    })\n  },\n  removeListener: () => eventEmitter.removeAllListeners(LP_IS_ON_AD_CLOSED),\n}\n\n/**\n * Android: onAdShowFailed\n *     iOS: didFailToShowWithError\n */\nconst onAdShowFailed = {\n  setListener: (\n    listener: (error: IronSourceError, adInfo: IronSourceAdInfo) => void\n  ) => {\n    eventEmitter.removeAllListeners(LP_IS_ON_AD_SHOW_FAILED)\n    eventEmitter.addListener(LP_IS_ON_AD_SHOW_FAILED, (obj: unknown) => {\n      const { error, adInfo } = decode(errorAdInfoCodec, obj)\n      listener(error, adInfo)\n    })\n  },\n  removeListener: () =>\n    eventEmitter.removeAllListeners(LP_IS_ON_AD_SHOW_FAILED),\n}\n\n/**\n * Android: onAdClicked\n *     iOS: didFailToShowWithError\n */\nconst onAdClicked = {\n  setListener: (listener: (adInfo: IronSourceAdInfo) => void) => {\n    eventEmitter.removeAllListeners(LP_IS_ON_AD_CLICKED)\n    eventEmitter.addListener(LP_IS_ON_AD_CLICKED, (adInfoObj: unknown) => {\n      listener(decode(ironSourceAdInfoCodec, adInfoObj))\n    })\n  },\n  removeListener: () => eventEmitter.removeAllListeners(LP_IS_ON_AD_CLICKED),\n}\n\n/**\n * Android: onAdShowSucceeded\n *     iOS: didShowWithAdInfo\n */\nconst onAdShowSucceeded = {\n  setListener: (listener: (adInfo: IronSourceAdInfo) => void) => {\n    eventEmitter.removeAllListeners(LP_IS_ON_AD_SHOW_SUCCEEDED)\n    eventEmitter.addListener(\n      LP_IS_ON_AD_SHOW_SUCCEEDED,\n      (adInfoObj: unknown) => {\n        listener(decode(ironSourceAdInfoCodec, adInfoObj))\n      }\n    )\n  },\n  removeListener: () => {\n    eventEmitter.removeAllListeners(LP_IS_ON_AD_SHOW_SUCCEEDED)\n  },\n}\n\nconst removeAllListeners = () => {\n  onAdReady.removeListener()\n  onAdLoadFailed.removeListener()\n  onAdOpened.removeListener()\n  onAdClosed.removeListener()\n  onAdShowFailed.removeListener()\n  onAdClicked.removeListener()\n  onAdShowSucceeded.removeListener()\n}\n\nexport const LevelPlayInterstitialEvents = {\n  onAdReady,\n  onAdLoadFailed,\n  onAdOpened,\n  onAdClosed,\n  onAdShowFailed,\n  onAdClicked,\n  onAdShowSucceeded,\n  removeAllListeners,\n}\n"]}